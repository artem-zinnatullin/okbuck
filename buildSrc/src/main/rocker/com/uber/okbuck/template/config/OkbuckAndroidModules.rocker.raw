@args (
String androidResourceRule,
String androidLibraryRule,
String manifestRule
)

load("//.okbuck/defs:okbuck_targets.bzl", "res_glob")
load("//tools/buck:targets_meta_api.bzl", "find_res_deps_for")

def get_rule_dep(rule_name):
    return ':{}'.format(rule_name)

# Macro that represents a union of all common rules to for an android_library
# Lyft defaults:
#     manifest_main_manifest = 'src/main/AndroidManifest.xml',
#     manifest_min_sdk = '21',
#     manifest_target_sdk = '28',
#     manifest_debuggable = False,
def okbuck_android_module(
        name,
        language = None,
        ## common args
        package=None,
        ## Manifest related args
        # TODO: move to constants.bzl once committed.
        manifest_main_manifest = 'src/main/AndroidManifest.xml',
        manifest_min_sdk = '21',
        manifest_target_sdk = '28',
        manifest_version_code=None,
        manifest_version_name=None,
        manifest_debuggable=False,
        manifest_secondary_manifests=None,
        ## Resources related args
        has_resources = False,
        res_res = None,
        res_project_res = None,
        res_assets = None,
        res_resource_union=None,
        res_extra_deps = [],
        ## Android library related args
        deps = [],
        exported_deps = [],
        **kwargs
    ):

    if name.startswith("src"):
        manifest_rule_name = name.replace("src", "manifest_lib", 1)
        res_rule_name = name.replace("src", "res", 1)
    else:
        manifest_rule_name = name + "_manifest"
        res_rule_name = name + "_res"

    @(manifestRule)(
        name = manifest_rule_name,
        main_manifest = manifest_main_manifest,
        min_sdk = manifest_min_sdk,
        target_sdk = manifest_target_sdk,
        package = package,
        version_code = manifest_version_code,
        version_name = manifest_version_name,
        debuggable = manifest_debuggable,
        secondary_manifests = manifest_secondary_manifests,
    )

    if has_resources:
        if res_res == None:
            res_res = res_glob([('src/main/res', '**')])
        if res_project_res == None:
            res_project_res = 'src/main/res'

    res_deps = find_res_deps_for(deps) + res_extra_deps

    res_exported_deps = find_res_deps_for(exported_deps)

    res_kwargs = dict(
        name = res_rule_name,
        deps = res_deps if res_deps else None,
        res = res_res,
        assets = res_assets,
        project_res = res_project_res,
        package = package,
        resource_union = res_resource_union,
    )
    if res_deps:
      res_kwargs.update({'deps' : sorted(res_deps)})
    if res_exported_deps:
      res_kwargs.update({'exported_deps' : sorted(res_exported_deps)})

    @(androidResourceRule)(**res_kwargs)

    src_kwargs = dict(
        name = name,
        manifest = get_rule_dep(manifest_rule_name),
    )
    src_kwargs.update(kwargs)

    src_deps = deps + \
               res_deps + \
               res_exported_deps + \
               [get_rule_dep(res_rule_name), get_rule_dep(manifest_rule_name)]

    src_kwargs.update({'deps' : sorted(src_deps)})
    if exported_deps:
        src_kwargs.update({'exported_deps' : sorted(exported_deps)})
    if language:
        src_kwargs.update({'language' : language})

    @(androidLibraryRule)(**src_kwargs)

def okbuck_kotlin_android_module(
        language = 'kotlin',
        **kwargs
    ):
    okbuck_android_module(
        language = language,
        **kwargs
    )
